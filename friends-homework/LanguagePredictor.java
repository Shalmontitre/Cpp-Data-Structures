import java.io.*;
import java.util.HashMap;
import java.util.ArrayList;

public class LanguagePredictor {
  
    private ArrayList<String> parseWords(String line) {
        ArrayList<String> wordList = new ArrayList<String>();
        // for each word in the line split by spaces
        for (String s : line.split(" ")) {
            if (s != null && !s.trim().isEmpty()) {
                // if the word is not null or emptystring, add it to the word list
                wordList.add(s);
            }
        }
        return wordList;
    }

    // takes filepath, returns array of lines
    private ArrayList<String> readFile(String filepath) {
        BufferedReader in = null;
        ArrayList<String> lineList = new ArrayList<String>();
        // try opening the file at filepath
        try {   
            in = new BufferedReader(new FileReader(filepath));
            String str;
            // while there are more lines
            while ((str = in.readLine()) != null) {
                // add each line to the list of lines
                lineList.add(str);
            }
            if (in != null) {
                in.close(); // close the file when we're finished with it
            }
        } catch (FileNotFoundException e) {
            System.out.println("File not found!");
        } catch (IOException e) {
            System.out.println("Problem opening file!");
            // print the exact error that occured
            e.printStackTrace();
        }
        return lineList;
    }
    
    public HashMap<String, Integer> readVocabulary(String fileName) {
        HashMap<String, Integer> wordMap = new HashMap<String, Integer>();
        
        // read the word frequency file back into a hashmap
        for (String line : readFile(fileName)) {
            // split each line into word & frequency, then add it to the hashmap with word as the key, and freq as the value
            wordMap.put(line.split(" ")[0], Integer.parseInt(line.split(" ")[1]));
        }
        return wordMap;
    }
    
    // classify the document based how many of the documentWords are eng or fre
    public String classifyDocument(HashMap<String,Integer> engVocab, HashMap<String,Integer> freVocab, ArrayList<String> documentWords) {
        int engWords = 0;
        int freWords = 0;
        // count english and french words
        for (String word : documentWords) {
            // if the word is in the engVocab frequency table, it's english
            if (engVocab.get(word) != null) {
                engWords++;
            }
            // if it's in the french hashmap, it's french
            if (freVocab.get(word) != null) {
                freWords++;
            }
            // used two ifs instead of else if because a word could be both valid english and french
        }
        // determine whether there are more english or french words
        String decision;
        if (engWords > freWords) {
            decision = "English";
        }
        else if (engWords < freWords) {
            decision = "French";
        }
        else {
            decision = "Tie";
        }
        // return the classification string
        return "English: " + Integer.toString(engWords) + "     French: " + Integer.toString(freWords) + "    Decision: " + decision;
    }

    public void classifyDocuments(HashMap<String,Integer> engVocab, HashMap<String,Integer> freVocab, String directory, int nFiles) {
        // loop nFiles times
        for (int i=1; i<=nFiles; i++) {
            // use int n to create the filepath e.g. "directoryname/1.txt"
            String file_path = directory + "/" + Integer.toString(i) + ".txt";

            ArrayList<String> documentWords = new ArrayList<String>();

            // read the file, and for each line in the file, add all the words on that line to the documentWords list
            for (String line : readFile(file_path)) {
                documentWords.addAll(parseWords(line));
            }

            // classify the document based how many of the documentWords are eng or fre
            System.out.println(Integer.toString(i) + " " + classifyDocument(engVocab, freVocab, documentWords));
        }
    }
    
    public static void main(String[] args) {
        LanguagePredictor langPredictor = new LanguagePredictor();

        // read the files generated by LanguageLearner back into hashmaps
        System.out.println("Reading word => frequency files:");
        HashMap<String, Integer> english = langPredictor.readVocabulary("eng_vocab.txt");
        System.out.println("  eng_vocab.txt - size: " + Integer.toString(english.size()));
        HashMap<String, Integer> french = langPredictor.readVocabulary("fre_vocab.txt");
        System.out.println("  fre_vocab.txt - size: " + Integer.toString(french.size()));

        // classify the first 20 files in the docs/test directory using the word frequency tables
        System.out.println("Classifying files in docs/test:");
        langPredictor.classifyDocuments(english, french, "docs/test", 20);
    }

    /*****************************************************************************
     Put the output of classifyDocuments here, and a sentence to describe whether
     your program worked.
     
     
     1 English: 29     French: 11    Decision: English
     2 English: 78     French: 33    Decision: English
     3 English: 148     French: 67    Decision: English
     4 English: 370     French: 140    Decision: English
     5 English: 91     French: 43    Decision: English
     6 English: 206     French: 87    Decision: English
     7 English: 60     French: 30    Decision: English
     8 English: 204     French: 94    Decision: English
     9 English: 74     French: 39    Decision: English
     10 English: 570     French: 272    Decision: English
     11 English: 66     French: 390    Decision: French
     12 English: 21     French: 143    Decision: French
     13 English: 23     French: 62    Decision: French
     14 English: 46     French: 236    Decision: French
     15 English: 38     French: 141    Decision: French
     16 English: 20     French: 121    Decision: French
     17 English: 41     French: 218    Decision: French
     18 English: 86     French: 424    Decision: French
     19 English: 21     French: 157    Decision: French
     20 English: 44     French: 202    Decision: French
     
     
     It worked exactly as expected! (after lots of debugging haha)
     
     *****************************************************************************/
}
